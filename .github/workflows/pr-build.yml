name: 持续集成构建

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
    # 排除标签推送，避免与发布工作流冲突
    tags-ignore:
      - '**'

env:
  FLUTTER_VERSION: '3.24.0'

jobs:
  # 快速检查和测试
  test-and-analyze:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 安装依赖
      run: flutter pub get

    - name: 代码格式检查
      run: dart format --output=none --set-exit-if-changed .

    - name: 代码分析
      run: flutter analyze

    - name: 运行单元测试
      run: flutter test --coverage --reporter=expanded

    - name: 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false

  # Android构建测试
  build-android-test:
    runs-on: ubuntu-latest
    needs: test-and-analyze
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 设置JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: 安装依赖
      run: flutter pub get

    - name: 构建Android APK (调试版)
      run: flutter build apk --debug

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: android-debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk
        retention-days: 7

  # Windows构建测试
  build-windows-test:
    runs-on: windows-latest
    needs: test-and-analyze
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 安装依赖
      run: flutter pub get

    - name: 启用Windows桌面支持
      run: flutter config --enable-windows-desktop

    - name: 构建Windows应用 (调试版)
      run: flutter build windows --debug

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: windows-debug-build
        path: build/windows/x64/runner/Debug/
        retention-days: 7

  # iOS构建测试 (仅在macOS上运行)
  build-ios-test:
    runs-on: macos-latest
    needs: test-and-analyze
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 安装依赖
      run: flutter pub get

    - name: 构建iOS (调试版，无签名)
      run: flutter build ios --debug --no-codesign

  # 构建状态汇总
  build-status:
    runs-on: ubuntu-latest
    needs: [test-and-analyze, build-android-test, build-windows-test]
    if: always()
    
    steps:
    - name: 检查构建状态
      run: |
        echo "## 🔍 构建状态报告" >> $GITHUB_STEP_SUMMARY
        echo "| 平台 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| 测试与分析 | ${{ needs.test-and-analyze.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Android构建 | ${{ needs.build-android-test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows构建 | ${{ needs.build-windows-test.result == 'success' && '✅ 通过' || '❌ 失败' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-and-analyze.result }}" == "success" && "${{ needs.build-android-test.result }}" == "success" && "${{ needs.build-windows-test.result }}" == "success" ]]; then
          echo "🎉 所有构建均成功完成！"
          exit 0
        else
          echo "❌ 部分构建失败，请检查日志"
          exit 1
        fi 