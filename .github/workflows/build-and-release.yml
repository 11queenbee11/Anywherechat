name: 构建并发布跨平台应用

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发构建
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: '发布版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  FLUTTER_VERSION: '3.32.5'

jobs:
  # 准备发布
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    # 注意：我们不在这里创建Release，而是在所有构建完成后创建
    - name: 设置版本变量
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
          echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          VERSION="v$(date +'%Y.%m.%d')-build.$(date +'%H%M')"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

  # 构建Android APK
  build-android:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: 设置JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: 设置Gradle环境
      run: |
        mkdir -p ~/.gradle
        echo "org.gradle.java.home=$JAVA_HOME" > ~/.gradle/gradle.properties

    - name: 安装Flutter依赖
      run: flutter pub get

    - name: 生成代码
      run: dart run build_runner build --delete-conflicting-outputs

    - name: 构建Android APK
      run: flutter build apk --release

    - name: 重命名APK文件
      run: |
        mv build/app/outputs/flutter-apk/app-release.apk AnywhereChat-Android-${{ needs.prepare.outputs.version }}.apk

    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: AnywhereChat-Android-${{ needs.prepare.outputs.version }}.apk

  # 构建Windows应用
  build-windows:
    needs: prepare
    runs-on: windows-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: 安装Flutter依赖
      run: flutter pub get

    - name: 生成代码
      run: dart run build_runner build --delete-conflicting-outputs

    - name: 构建Windows应用
      run: flutter build windows --release

    - name: 创建Windows便携包
      run: |
        $buildPath = "build\windows\x64\runner\Release"
        $packagePath = "AnywhereChat-Windows-${{ needs.prepare.outputs.version }}"

        New-Item -ItemType Directory -Path $packagePath -Force
        Copy-Item -Path "$buildPath\*" -Destination $packagePath -Recurse -Force

        @"
        @echo off
        cd /d "%~dp0"
        start "" "anywherechat.exe"
        "@ | Out-File -FilePath "$packagePath\启动AnywhereChat.bat" -Encoding ASCII

        @"
        AnywhereChat Windows 便携版

        运行方式：
        1. 双击 anywherechat.exe 直接运行
        2. 或双击 启动AnywhereChat.bat 运行

        系统要求：Windows 10+ 64位
        版本: ${{ needs.prepare.outputs.version }}
        "@ | Out-File -FilePath "$packagePath\README.txt" -Encoding UTF8

        Compress-Archive -Path $packagePath -DestinationPath "$packagePath.zip"

    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: AnywhereChat-Windows-${{ needs.prepare.outputs.version }}.zip

  # 构建iOS应用
  build-ios:
    needs: prepare
    runs-on: macos-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: 安装Flutter依赖
      run: flutter pub get

    - name: 生成代码
      run: dart run build_runner build --delete-conflicting-outputs

    - name: 构建iOS应用（无签名）
      run: flutter build ios --release --no-codesign
      continue-on-error: true

    - name: 创建iOS构建信息
      run: |
        mkdir -p ios-build
        echo "iOS构建信息" > ios-build/build-info.txt
        echo "版本: ${{ needs.prepare.outputs.version }}" >> ios-build/build-info.txt
        echo "注意: 此构建未签名，需要在Xcode中配置签名后才能安装到设备上。" >> ios-build/build-info.txt

        # 打包构建信息
        zip -r AnywhereChat-iOS-${{ needs.prepare.outputs.version }}-unsigned.zip ios-build

    - name: 上传iOS构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: AnywhereChat-iOS-${{ needs.prepare.outputs.version }}-unsigned.zip





  # 完成发布
  finalize-release:
    needs: [prepare, build-android, build-windows, build-ios]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4

    - name: 创建Release并上传所有文件
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.version }}
        name: AnywhereChat ${{ needs.prepare.outputs.version }}
        body: |
          # AnywhereChat ${{ needs.prepare.outputs.version }}

          **发布时间**: $(date +'%Y-%m-%d %H:%M:%S UTC')

          ## 📦 构建产物

          ### 移动端
          - ✅ **Android APK**: 适用于Android 5.0+设备
          - ⚠️ **iOS**: 未签名构建，需要在Xcode中配置签名

          ### 桌面端
          - ✅ **Windows**: 便携版ZIP包，适用于Windows 10+

          ## 🔧 技术信息

          - **Flutter版本**: ${{ env.FLUTTER_VERSION }}
          - **Dart版本**: 3.8.1
          - **构建环境**: GitHub Actions
          - **许可证**: 双重许可证 (Apache 2.0 / 商业许可证)

          ## 📞 支持

          - 商业许可证咨询: 927751260@qq.com
          - 技术支持: GitHub Issues
        files: |
          android-build/*
          windows-build/*
          ios-build/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 构建完成通知
      run: |
        echo "🎉 AnywhereChat 跨平台构建完成!"
        echo "📱 Android: ✅"
        echo "🍎 iOS: ✅"
        echo "🖥️ Windows: ✅"
        echo "🔗 Release链接: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.version }}"