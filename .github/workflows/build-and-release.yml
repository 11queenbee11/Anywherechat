name: 构建并发布跨平台应用

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发构建
  workflow_dispatch:  # 允许手动触发
    inputs:
      version:
        description: '发布版本号 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'

# 设置工作流权限
permissions:
  contents: write  # 需要写权限来创建Release
  actions: read    # 需要读权限来访问构建产物

env:
  FLUTTER_VERSION: '3.32.5'

jobs:
  # 准备发布
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    # 注意：我们不在这里创建Release，而是在所有构建完成后创建
    - name: 设置版本变量
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
          echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          VERSION="v$(date +'%Y.%m.%d')-build.$(date +'%H%M')"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

  # 构建Android APK
  build-android:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true  # 启用Flutter缓存

    - name: 设置JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'

    # 缓存Gradle依赖
    - name: 缓存Gradle依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 缓存Flutter依赖
    - name: 缓存Flutter依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-

    - name: 设置Gradle环境
      run: |
        mkdir -p ~/.gradle
        echo "org.gradle.java.home=$JAVA_HOME" > ~/.gradle/gradle.properties
        echo "org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=2g -XX:+UseG1GC" >> ~/.gradle/gradle.properties
        echo "org.gradle.java.target=21" >> ~/.gradle/gradle.properties
        echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.caching=true" >> ~/.gradle/gradle.properties
        echo "org.gradle.daemon=true" >> ~/.gradle/gradle.properties

        # 验证Java版本
        java -version
        echo "JAVA_HOME=$JAVA_HOME"

    - name: 安装Flutter依赖
      run: |
        # 只在缓存未命中时清理
        if [ ! -d ".dart_tool" ]; then
          flutter clean
        fi
        flutter pub get

    - name: 生成代码
      run: dart run build_runner build --delete-conflicting-outputs

    # 初始化Gradle Wrapper并预热守护进程
    - name: 初始化Gradle Wrapper并预热守护进程
      run: |
        echo "🔍 检查当前目录结构..."
        ls -la

        echo "🔍 检查android目录..."
        ls -la android/

        cd android

        # 确保gradlew文件存在并有执行权限
        if [ ! -f "gradlew" ]; then
          echo "❌ gradlew文件不存在，尝试重新生成..."

          # 尝试使用gradle wrapper命令重新生成
          if command -v gradle >/dev/null 2>&1; then
            echo "📦 使用gradle命令重新生成wrapper..."
            gradle wrapper --gradle-version 8.12
          else
            echo "❌ gradle命令不可用，手动创建gradlew..."
            # 从GitHub下载标准的gradlew文件
            curl -L -o gradlew "https://raw.githubusercontent.com/gradle/gradle/v8.12.0/gradlew"
            curl -L -o gradlew.bat "https://raw.githubusercontent.com/gradle/gradle/v8.12.0/gradlew.bat"
          fi
        fi

        # 确保gradlew有执行权限
        chmod +x gradlew
        chmod +x gradlew.bat 2>/dev/null || true

        # 确保gradle-wrapper.jar存在
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "📦 下载 gradle-wrapper.jar..."
          mkdir -p gradle/wrapper
          curl -L -o gradle/wrapper/gradle-wrapper.jar \
            "https://github.com/gradle/gradle/raw/v8.12.0/gradle/wrapper/gradle-wrapper.jar"
        fi

        # 运行初始化脚本（如果存在）
        if [ -f "init-gradle-wrapper.sh" ]; then
          echo "🔧 运行 Gradle Wrapper 初始化脚本..."
          chmod +x init-gradle-wrapper.sh
          ./init-gradle-wrapper.sh
        fi

        # 验证gradlew可执行
        echo "🔍 验证gradlew文件..."
        ls -la gradlew
        file gradlew

        # 预热 Gradle 守护进程
        echo "🔥 预热 Gradle 守护进程..."
        echo "✅ gradlew 执行权限已设置"
        echo "🧪 测试 gradlew..."
        
        # 显示Java版本
        java -version
        
        echo "✅ Gradle Wrapper 初始化成功"
        
        # 验证gradlew文件
        echo "🔍 验证gradlew文件..."
        ls -la gradlew
        file gradlew
        
        # 预热 Gradle 守护进程
        echo "🔥 预热 Gradle 守护进程..."
        java -version
        
        # 测试基本的 gradle 命令，不使用 tasks
        echo "🔧 测试 Gradle 配置..."
        ./gradlew --version || {
          echo "⚠️ gradlew --version 失败，尝试修复..."
          
          # 重新下载 gradle-wrapper.jar
          echo "📦 重新下载 gradle-wrapper.jar..."
          mkdir -p gradle/wrapper
          curl -L -o gradle/wrapper/gradle-wrapper.jar \
            "https://github.com/gradle/gradle/raw/v8.12.0/gradle/wrapper/gradle-wrapper.jar"
          
          # 再次尝试
          ./gradlew --version
        }
        
        # 如果 --version 成功，再尝试 tasks 命令
        echo "🔧 验证 Gradle 任务..."
        ./gradlew help --quiet || {
          echo "⚠️ help 命令失败，跳过任务验证..."
        }

    - name: 构建Android APK
      run: |
        echo "🚀 开始构建Android APK..."
        echo "📊 构建开始时间: $(date)"

        # 使用优化的构建参数
        flutter build apk --release \
          --target-platform android-arm64 \
          --split-per-abi \
          --obfuscate \
          --split-debug-info=build/debug-info

        echo "✅ Android APK构建完成"
        echo "📊 构建结束时间: $(date)"

        # 显示构建产物信息
        echo "📦 构建产物:"
        ls -la build/app/outputs/flutter-apk/

    - name: 打包Android构建产物
      run: |
        mkdir -p android-build

        # 检查是否有分架构APK文件
        if [ -f "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" ]; then
          echo "📱 找到分架构APK文件，开始打包..."

          # 复制所有架构的APK文件
          cp build/app/outputs/flutter-apk/app-arm64-v8a-release.apk android-build/AnywhereChat-Android-${{ needs.prepare.outputs.version }}-arm64.apk

          # 如果有其他架构的APK也复制
          if [ -f "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk" ]; then
            cp build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk android-build/AnywhereChat-Android-${{ needs.prepare.outputs.version }}-arm32.apk
          fi

          # 创建构建信息
          echo "Android构建信息" > android-build/build-info.txt
          echo "版本: ${{ needs.prepare.outputs.version }}" >> android-build/build-info.txt
          echo "构建时间: $(date)" >> android-build/build-info.txt
          echo "架构: ARM64 (推荐)" >> android-build/build-info.txt
          echo "最小SDK: Android 5.0 (API 21)" >> android-build/build-info.txt
          echo "优化: 启用代码混淆和分架构构建" >> android-build/build-info.txt

        elif [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
          echo "📱 找到通用APK文件..."
          cp build/app/outputs/flutter-apk/app-release.apk android-build/AnywhereChat-Android-${{ needs.prepare.outputs.version }}.apk

          # 创建构建信息
          echo "Android构建信息" > android-build/build-info.txt
          echo "版本: ${{ needs.prepare.outputs.version }}" >> android-build/build-info.txt
          echo "构建时间: $(date)" >> android-build/build-info.txt
          echo "架构: 通用 (所有架构)" >> android-build/build-info.txt
          echo "最小SDK: Android 5.0 (API 21)" >> android-build/build-info.txt
        else
          echo "❌ 未找到APK文件"
          exit 1
        fi

        # 显示最终的构建产物
        echo "📦 最终构建产物:"
        ls -la android-build/

    - name: 上传Android构建产物
      uses: actions/upload-artifact@v4
      with:
        name: android-build
        path: android-build/*



  # 构建iOS应用
  build-ios:
    needs: prepare
    runs-on: macos-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'

    - name: 清理并安装Flutter依赖
      run: |
        flutter clean
        rm -rf .dart_tool
        flutter pub get --no-precompile

    - name: 生成代码
      run: dart run build_runner build --delete-conflicting-outputs

    - name: 构建iOS应用（无签名）
      run: flutter build ios --release --no-codesign
      continue-on-error: true

    - name: 创建IPA文件
      run: |
        mkdir -p ios-build
        mkdir -p Payload

        # 检查构建产物是否存在
        if [ -d "build/ios/iphoneos/Runner.app" ]; then
          echo "✅ 找到iOS构建产物，开始创建IPA..."

          # 复制.app到Payload目录（IPA标准结构）
          cp -r build/ios/iphoneos/Runner.app Payload/

          # 创建IPA文件（IPA本质上是一个特殊的ZIP文件）
          zip -r AnywhereChat-iOS-${{ needs.prepare.outputs.version }}-unsigned.ipa Payload

          # 移动IPA到构建目录
          mv AnywhereChat-iOS-${{ needs.prepare.outputs.version }}-unsigned.ipa ios-build/

          # 同时保留.app文件供开发者使用
          cp -r build/ios/iphoneos/Runner.app ios-build/

          # 创建安装说明
          cat > ios-build/README.md << 'EOF'
        # AnywhereChat iOS 安装说明

        ## 📱 文件说明
        - AnywhereChat-iOS-${{ needs.prepare.outputs.version }}-unsigned.ipa - 未签名的IPA文件
        - Runner.app - 应用包文件（供开发者使用）

        ## 🔧 安装方法

        ### 方法一：使用第三方工具（推荐）
        1. 下载 AltStore 或 Sideloadly
        2. 使用工具安装 .ipa 文件到设备

        ### 方法二：使用Xcode（需要开发者账号）
        1. 打开Xcode
        2. 将 Runner.app 拖拽到Xcode中
        3. 配置签名证书
        4. 安装到设备

        ## ⚠️ 注意事项
        - 此构建未签名，无法直接安装
        - 需要有效的Apple开发者证书进行签名
        - 安装后可能需要在设置中信任开发者
        EOF

          # 创建构建信息
          echo "iOS构建信息" > ios-build/build-info.txt
          echo "版本: ${{ needs.prepare.outputs.version }}" >> ios-build/build-info.txt
          echo "构建时间: $(date)" >> ios-build/build-info.txt
          echo "文件类型: IPA (iOS App Package)" >> ios-build/build-info.txt
          echo "签名状态: 未签名" >> ios-build/build-info.txt

          # 显示打包内容
          echo "📦 打包内容:"
          ls -la ios-build/

          # 显示IPA文件信息
          echo "📱 IPA文件信息:"
          file ios-build/*.ipa

          echo "✅ iOS IPA文件创建完成"
        else
          echo "❌ 未找到iOS构建产物，创建错误信息..."

          # 创建错误信息
          echo "iOS构建失败" > ios-build/build-error.txt
          echo "版本: ${{ needs.prepare.outputs.version }}" >> ios-build/build-error.txt
          echo "错误: 未找到构建产物 build/ios/iphoneos/Runner.app" >> ios-build/build-error.txt
          echo "构建时间: $(date)" >> ios-build/build-error.txt

          # 显示构建目录内容用于调试
          echo "🔍 构建目录内容:"
          find build -name "*.app" -type d 2>/dev/null || echo "未找到.app文件"
        fi

    - name: 上传iOS构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ios-build
        path: ios-build/*

  # 注意：Windows构建已被移除，因为持续出现文件锁定问题




  # 完成发布
  finalize-release:
    needs: [prepare, build-android, build-ios]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4

    - name: 获取当前时间
      id: current-time
      run: echo "time=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: 创建Release并上传所有文件
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.version }}
        name: AnywhereChat ${{ needs.prepare.outputs.version }}
        body: |
          # AnywhereChat ${{ needs.prepare.outputs.version }}

          **发布时间**: ${{ steps.current-time.outputs.time }}

          ## 📦 构建产物

          ### 移动端
          - ✅ **Android APK**: 适用于Android 5.0+设备，可直接安装
          - ✅ **iOS IPA**: 未签名IPA文件，需要使用第三方工具或Xcode签名后安装

          ### 桌面端
          - ❌ **Windows**: 暂时移除（文件锁定问题）

          ## 🔧 技术信息

          - **Flutter版本**: ${{ env.FLUTTER_VERSION }}
          - **Dart版本**: 3.8.1
          - **构建环境**: GitHub Actions
          - **许可证**: 双重许可证 (Apache 2.0 / 商业许可证)

          ## 📞 支持

          - 商业许可证咨询: 927751260@qq.com
          - 技术支持: GitHub Issues
        files: |
          android-build/*
          ios-build/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 构建完成通知
      run: |
        echo "🎉 AnywhereChat 跨平台构建完成!"
        echo "📱 Android: ✅"
        echo "🍎 iOS: ✅"
        echo "🖥️ Windows: ✅"
        echo "🔗 Release链接: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.version }}"