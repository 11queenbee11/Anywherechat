name: 签名构建工作流

on:
  workflow_dispatch:
    inputs:
      build_android:
        description: '构建Android签名APK/AAB'
        type: boolean
        default: true
      build_ios:
        description: '构建iOS (需要签名配置)'
        type: boolean
        default: false
      build_windows:
        description: '构建Windows'
        type: boolean
        default: true
      upload_to_store:
        description: '上传到应用商店'
        type: boolean
        default: false

env:
  FLUTTER_VERSION: '3.24.0'

jobs:
  # 构建Android签名版本
  build-android-signed:
    runs-on: ubuntu-latest
    if: inputs.build_android
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 设置JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: 安装依赖
      run: flutter pub get

    # 如果有签名密钥，创建签名配置文件
    - name: 创建签名配置
      if: env.ANDROID_KEYSTORE_BASE64 != ''
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        # 创建keystore文件
        echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
        
        # 创建key.properties文件
        cat > android/key.properties << EOF
        storePassword=$KEYSTORE_PASSWORD
        keyPassword=$KEY_PASSWORD
        keyAlias=$KEY_ALIAS
        storeFile=upload-keystore.jks
        EOF

    - name: 构建签名APK
      run: |
        if [ -f "android/key.properties" ]; then
          echo "使用签名配置构建APK"
          flutter build apk --release --split-per-abi
        else
          echo "未找到签名配置，构建无签名APK"
          flutter build apk --release --split-per-abi
        fi

    - name: 构建签名AAB
      run: |
        if [ -f "android/key.properties" ]; then
          echo "使用签名配置构建AAB"
          flutter build appbundle --release
        else
          echo "未找到签名配置，构建无签名AAB"
          flutter build appbundle --release
        fi

    - name: 上传APK文件
      uses: actions/upload-artifact@v4
      with:
        name: android-signed-apks
        path: |
          build/app/outputs/flutter-apk/*.apk
        retention-days: 30

    - name: 上传AAB文件
      uses: actions/upload-artifact@v4
      with:
        name: android-signed-aab
        path: build/app/outputs/bundle/release/*.aab
        retention-days: 30

    # 如果启用了应用商店上传
    - name: 上传到Google Play Console
      if: inputs.upload_to_store && env.GOOGLE_PLAY_SERVICE_ACCOUNT != ''
      uses: r0adkll/upload-google-play@v1
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
      with:
        serviceAccountJsonPlainText: ${{ env.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        packageName: com.aiassistant.app
        releaseFiles: build/app/outputs/bundle/release/*.aab
        track: internal

  # 构建iOS签名版本
  build-ios-signed:
    runs-on: macos-latest
    if: inputs.build_ios
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 安装依赖
      run: flutter pub get

    # 设置iOS签名 (需要配置secrets)
    - name: 设置iOS签名
      if: env.IOS_CERTIFICATE_BASE64 != ''
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # 创建临时keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # 导入证书
        echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        
        # 导入provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

    - name: 构建iOS
      run: |
        if [ -f "~/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision" ]; then
          echo "使用签名配置构建iOS"
          flutter build ios --release
        else
          echo "未找到签名配置，构建无签名iOS"
          flutter build ios --release --no-codesign
        fi

    - name: 创建IPA
      run: |
        cd build/ios/iphoneos
        mkdir -p Payload
        cp -r Runner.app Payload/
        zip -r ai-assistant-ios-signed.ipa Payload/
        mv ai-assistant-ios-signed.ipa ../../../

    - name: 上传IPA文件
      uses: actions/upload-artifact@v4
      with:
        name: ios-signed-ipa
        path: ai-assistant-ios-signed.ipa
        retention-days: 30

  # 构建Windows版本
  build-windows-signed:
    runs-on: windows-latest
    if: inputs.build_windows
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        architecture: x64

    - name: 安装依赖
      run: flutter pub get

    - name: 启用Windows桌面支持
      run: flutter config --enable-windows-desktop

    - name: 构建Windows应用
      run: flutter build windows --release

    - name: 构建MSIX包
      run: flutter pub run msix:create

    - name: 创建发布包
      run: |
        Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "ai-assistant-windows-signed.zip"

    - name: 上传Windows文件
      uses: actions/upload-artifact@v4
      with:
        name: windows-signed-build
        path: |
          ai-assistant-windows-signed.zip
          build/windows/x64/runner/Release/*.msix
        retention-days: 30

  # 构建摘要
  build-summary:
    runs-on: ubuntu-latest
    needs: [build-android-signed, build-ios-signed, build-windows-signed]
    if: always()
    
    steps:
    - name: 生成构建报告
      run: |
        echo "## 🏗️ 签名构建完成报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 构建状态" >> $GITHUB_STEP_SUMMARY
        echo "| 平台 | 状态 | 构建 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.build_android }}" == "true" ]]; then
          echo "| Android | ${{ needs.build-android-signed.result == 'success' && '✅ 成功' || '❌ 失败' }} | 已启用 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Android | ⏭️ 跳过 | 未启用 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ inputs.build_ios }}" == "true" ]]; then
          echo "| iOS | ${{ needs.build-ios-signed.result == 'success' && '✅ 成功' || '❌ 失败' }} | 已启用 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| iOS | ⏭️ 跳过 | 未启用 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ inputs.build_windows }}" == "true" ]]; then
          echo "| Windows | ${{ needs.build-windows-signed.result == 'success' && '✅ 成功' || '❌ 失败' }} | 已启用 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Windows | ⏭️ 跳过 | 未启用 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 构建产物" >> $GITHUB_STEP_SUMMARY
        echo "所有构建产物已上传到工作流的Artifacts中，可在Actions页面下载。" >> $GITHUB_STEP_SUMMARY 