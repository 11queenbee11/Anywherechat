name: Multi-Platform Build and Release

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: ''
      release_notes:
        description: 'Release notes'
        required: false
        default: 'Automated build from GitHub Actions'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.version.outputs.tag }}
      build_time: ${{ steps.version.outputs.build_time }}
    steps:
      - name: Generate version info
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version_tag }}" ]; then
            echo "tag=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +'%Y.%m.%d')-build.$(date +'%H%M')" >> $GITHUB_OUTPUT
          fi
          echo "build_time=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

  build-windows:
    runs-on: windows-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Build Windows app
        run: flutter build windows --release

      - name: Create Windows portable package
        run: |
          $buildPath = "build\windows\x64\runner\Release"
          $packagePath = "AnywhereChat-Windows-${{ needs.prepare.outputs.version_tag }}"
          
          # Create package directory
          New-Item -ItemType Directory -Path $packagePath -Force
          
          # Copy all files from build output
          Copy-Item -Path "$buildPath\*" -Destination $packagePath -Recurse -Force
          
          # Create a simple launcher script
          @"
          @echo off
          cd /d "%~dp0"
          start "" "anywherechat.exe"
          "@ | Out-File -FilePath "$packagePath\启动AnywhereChat.bat" -Encoding ASCII
          
          # Create README
          @"
          AnywhereChat Windows Portable Version
          
          运行方式：
          1. 双击 anywherechat.exe 直接运行
          2. 或双击 启动AnywhereChat.bat 运行
          
          系统要求：
          - Windows 10 或更高版本
          - 64位系统
          
          构建时间：${{ needs.prepare.outputs.build_time }}
          版本标签：${{ needs.prepare.outputs.version_tag }}
          "@ | Out-File -FilePath "$packagePath\README.txt" -Encoding UTF8
          
          # Create ZIP package
          Compress-Archive -Path $packagePath -DestinationPath "$packagePath.zip"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: AnywhereChat-Windows-${{ needs.prepare.outputs.version_tag }}.zip

  build-android:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Build Android APK (Release)
        run: flutter build apk --release

      - name: Build Android APK (Debug)
        run: flutter build apk --debug

      - name: Rename APK files
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk \
             AnywhereChat-Android-Release-${{ needs.prepare.outputs.version_tag }}.apk
          mv build/app/outputs/flutter-apk/app-debug.apk \
             AnywhereChat-Android-Debug-${{ needs.prepare.outputs.version_tag }}.apk

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: |
            AnywhereChat-Android-Release-${{ needs.prepare.outputs.version_tag }}.apk
            AnywhereChat-Android-Debug-${{ needs.prepare.outputs.version_tag }}.apk

  build-ios:
    runs-on: macos-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Build iOS app (without signing)
        run: |
          flutter build ios --release --no-codesign
        continue-on-error: true

      - name: Create iOS build info
        run: |
          mkdir -p ios-build
          if [ -d "build/ios/iphoneos" ]; then
            echo "iOS build completed successfully" > ios-build/build-status.txt
            echo "Build time: ${{ needs.prepare.outputs.build_time }}" >> ios-build/build-status.txt
            echo "Version: ${{ needs.prepare.outputs.version_tag }}" >> ios-build/build-status.txt
            echo "" >> ios-build/build-status.txt
            echo "Note: This is an unsigned iOS build." >> ios-build/build-status.txt
            echo "To install on device, you need to:" >> ios-build/build-status.txt
            echo "1. Open the project in Xcode" >> ios-build/build-status.txt
            echo "2. Configure code signing" >> ios-build/build-status.txt
            echo "3. Build and deploy from Xcode" >> ios-build/build-status.txt
            
            # Try to create archive info
            if [ -f "build/ios/iphoneos/Runner.app/Info.plist" ]; then
              cp -r build/ios/iphoneos ios-build/
            fi
          else
            echo "iOS build failed or incomplete" > ios-build/build-status.txt
            echo "This may be due to missing code signing configuration." >> ios-build/build-status.txt
          fi

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ios-build/

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare, build-windows, build-android, build-ios]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          # AnywhereChat ${{ needs.prepare.outputs.version_tag }}
          
          **构建时间**: ${{ needs.prepare.outputs.build_time }}
          
          ## 📦 构建产物
          
          ### Windows
          - ✅ Windows 便携版 (64位)
          - 支持 Windows 10 及更高版本
          - 无需安装，解压即用
          
          ### Android
          - ✅ Release APK (生产版本)
          - ✅ Debug APK (调试版本)
          - 支持 Android 5.0 (API 21) 及更高版本
          
          ### iOS
          - ⚠️ 未签名构建 (需要在Xcode中配置签名)
          - 支持 iOS 12.0 及更高版本
          
          ## 📝 发布说明
          
          ${{ github.event.inputs.release_notes }}
          
          ## 🔧 技术信息

          - **Flutter版本**: 3.24.5
          - **Dart版本**: 3.8.1
          - **构建环境**: GitHub Actions
          - **许可证**: 双重许可证 (Apache 2.0 / 商业许可证)
          
          ## 📞 支持
          
          - 商业许可证咨询: 927751260@qq.com
          - 技术支持: GitHub Issues
          
          ---
          
          *此版本通过GitHub Actions自动构建*
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version_tag }}
          name: AnywhereChat ${{ needs.prepare.outputs.version_tag }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            windows-build/AnywhereChat-Windows-${{ needs.prepare.outputs.version_tag }}.zip
            android-build/AnywhereChat-Android-Release-${{ needs.prepare.outputs.version_tag }}.apk
            android-build/AnywhereChat-Android-Debug-${{ needs.prepare.outputs.version_tag }}.apk
            ios-build/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
